name: Build Extension

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}
      BLENDER_DOWNLOAD: ${{ github.workspace }}/blender_download
      BLENDER_EXTRACT: ${{ github.workspace }}/blender_extract
      REPO_CHECKOUT: ${{ github.workspace }}/repo
      BUILD_PATH: ${{ github.workspace }}/build
      ARTIFACT_PATH: ${{ github.workspace }}/artifact
      EXTENSION_NAME: ${{ github.event.repository.name }}

    strategy:
      fail-fast: false
      matrix:
        blender_version:
          [ "4.2" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_CHECKOUT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install required Python packages
        run: |
          python -m pip install --upgrade pip
          pip install requests toml-cli toml beautifulsoup4

      - name: Download Blender
        run: |
          SCRIPT_PATH=$(find "${{ env.REPO_CHECKOUT }}" -name download_blender.sh)
          bash "$SCRIPT_PATH" ${{ matrix.blender_version }} "${{ env.BLENDER_DOWNLOAD }}" "${{ env.BLENDER_EXTRACT }}"

      - name: Set Blender path
        run: echo "BLENDER_PATH=$(find "${{ env.BLENDER_EXTRACT }}" -type f -name blender)" >> $GITHUB_ENV

      - name: Extract version from blender_manifest.toml
        run: |
          MANIFEST_PATH=$(find "${{ env.REPO_CHECKOUT }}" -name blender_manifest.toml | head -n 1)
          echo "EXT_VERSION=$(python -c "import toml; print(toml.load('$MANIFEST_PATH')['version'])")" >> $GITHUB_ENV

      - name: Build extension
        run: |
          mkdir -p "${{ env.BUILD_PATH }}"
          "${{ env.BLENDER_PATH }}" --background --command extension build --source-dir="${{ env.REPO_CHECKOUT }}" --output-dir="${{ env.BUILD_PATH }}" --verbose

      - name: Set ZIP file path
        run: |
          ZIP_FILE=$(find "${{ env.BUILD_PATH }}" -name "*.zip" | head -n 1)
          echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_ENV

      - name: Validate extension
        run: |
          "${{ env.BLENDER_PATH }}" --background --command extension validate "${{ env.ZIP_FILE }}"

      - name: Unzip the file
        run: |
          mkdir -p "${{ env.ARTIFACT_PATH }}"
          unzip "${{ env.ZIP_FILE }}" -d "${{ env.ARTIFACT_PATH }}"

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXTENSION_NAME }}-${{ env.EXT_VERSION }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: warn
